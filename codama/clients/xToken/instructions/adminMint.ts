/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Encoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { X_TOKEN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADMIN_MINT_DISCRIMINATOR = 4;

export function getAdminMintDiscriminatorBytes() {
  return getU8Encoder().encode(ADMIN_MINT_DISCRIMINATOR);
}

export type AdminMintInstruction<
  TProgram extends string = typeof X_TOKEN_PROGRAM_ADDRESS,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TAccountBondingCurve extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountRecipientTokenAccount extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      TAccountBondingCurve extends string
        ? ReadonlyAccount<TAccountBondingCurve>
        : TAccountBondingCurve,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountRecipientTokenAccount extends string
        ? WritableAccount<TAccountRecipientTokenAccount>
        : TAccountRecipientTokenAccount,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AdminMintInstructionData = {
  /** Amount to mint (base units) */
  amount: bigint;
};

export type AdminMintInstructionDataArgs = {
  /** Amount to mint (base units) */
  amount: number | bigint;
};

export function getAdminMintInstructionDataEncoder(): FixedSizeEncoder<AdminMintInstructionDataArgs> {
  return getStructEncoder([['amount', getU64Encoder()]]);
}

export function getAdminMintInstructionDataDecoder(): FixedSizeDecoder<AdminMintInstructionData> {
  return getStructDecoder([['amount', getU64Decoder()]]);
}

export function getAdminMintInstructionDataCodec(): FixedSizeCodec<
  AdminMintInstructionDataArgs,
  AdminMintInstructionData
> {
  return combineCodec(
    getAdminMintInstructionDataEncoder(),
    getAdminMintInstructionDataDecoder(),
  );
}

export type AdminMintInput<
  TAccountAuthority extends string = string,
  TAccountBondingCurve extends string = string,
  TAccountMint extends string = string,
  TAccountRecipientTokenAccount extends string = string,
  TAccountTokenProgram extends string = string,
> = {
  /** Authority that controls the bonding curve */
  authority: TransactionSigner<TAccountAuthority>;
  /** Bonding curve state account (PDA) */
  bondingCurve: Address<TAccountBondingCurve>;
  /** Token mint account */
  mint: Address<TAccountMint>;
  /** Recipient token account (ATA) */
  recipientTokenAccount: Address<TAccountRecipientTokenAccount>;
  /** Token Program */
  tokenProgram?: Address<TAccountTokenProgram>;
  amount: AdminMintInstructionDataArgs['amount'];
};

export function getAdminMintInstruction<
  TAccountAuthority extends string,
  TAccountBondingCurve extends string,
  TAccountMint extends string,
  TAccountRecipientTokenAccount extends string,
  TAccountTokenProgram extends string,
  TProgramAddress extends Address = typeof X_TOKEN_PROGRAM_ADDRESS,
>(
  input: AdminMintInput<
    TAccountAuthority,
    TAccountBondingCurve,
    TAccountMint,
    TAccountRecipientTokenAccount,
    TAccountTokenProgram
  >,
  config?: { programAddress?: TProgramAddress },
): AdminMintInstruction<
  TProgramAddress,
  TAccountAuthority,
  TAccountBondingCurve,
  TAccountMint,
  TAccountRecipientTokenAccount,
  TAccountTokenProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? X_TOKEN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    authority: { value: input.authority ?? null, isWritable: false },
    bondingCurve: { value: input.bondingCurve ?? null, isWritable: false },
    mint: { value: input.mint ?? null, isWritable: true },
    recipientTokenAccount: {
      value: input.recipientTokenAccount ?? null,
      isWritable: true,
    },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.authority),
      getAccountMeta(accounts.bondingCurve),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.recipientTokenAccount),
      getAccountMeta(accounts.tokenProgram),
    ],
    programAddress,
    data: getAdminMintInstructionDataEncoder().encode(
      args as AdminMintInstructionDataArgs,
    ),
  } as AdminMintInstruction<
    TProgramAddress,
    TAccountAuthority,
    TAccountBondingCurve,
    TAccountMint,
    TAccountRecipientTokenAccount,
    TAccountTokenProgram
  >;

  return instruction;
}

export type ParsedAdminMintInstruction<
  TProgram extends string = typeof X_TOKEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Authority that controls the bonding curve */
    authority: TAccountMetas[0];
    /** Bonding curve state account (PDA) */
    bondingCurve: TAccountMetas[1];
    /** Token mint account */
    mint: TAccountMetas[2];
    /** Recipient token account (ATA) */
    recipientTokenAccount: TAccountMetas[3];
    /** Token Program */
    tokenProgram: TAccountMetas[4];
  };
  data: AdminMintInstructionData;
};

export function parseAdminMintInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedAdminMintInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      authority: getNextAccount(),
      bondingCurve: getNextAccount(),
      mint: getNextAccount(),
      recipientTokenAccount: getNextAccount(),
      tokenProgram: getNextAccount(),
    },
    data: getAdminMintInstructionDataDecoder().decode(instruction.data),
  };
}
