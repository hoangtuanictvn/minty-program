/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { X_TOKEN_PROGRAM_ADDRESS } from '../programs';

export const GET_LEADERBOARD_DISCRIMINATOR = 4;

export function getGetLeaderboardDiscriminatorBytes() {
  return getU8Encoder().encode(GET_LEADERBOARD_DISCRIMINATOR);
}

export type GetLeaderboardInstruction<
  TProgram extends string = typeof X_TOKEN_PROGRAM_ADDRESS,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<TRemainingAccounts>;

export type GetLeaderboardInstructionData = {
  discriminator: number;
  /** Number of top traders to return (max 100) */
  limit: number;
  /** Offset for pagination */
  offset: number;
};

export type GetLeaderboardInstructionDataArgs = {
  /** Number of top traders to return (max 100) */
  limit: number;
  /** Offset for pagination */
  offset: number;
};

export function getGetLeaderboardInstructionDataEncoder(): FixedSizeEncoder<GetLeaderboardInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['limit', getU8Encoder()],
      ['offset', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 4 }),
  );
}

export function getGetLeaderboardInstructionDataDecoder(): FixedSizeDecoder<GetLeaderboardInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['limit', getU8Decoder()],
    ['offset', getU8Decoder()],
  ]);
}

export function getGetLeaderboardInstructionDataCodec(): FixedSizeCodec<
  GetLeaderboardInstructionDataArgs,
  GetLeaderboardInstructionData
> {
  return combineCodec(
    getGetLeaderboardInstructionDataEncoder(),
    getGetLeaderboardInstructionDataDecoder(),
  );
}

export type GetLeaderboardInput = {
  limit: GetLeaderboardInstructionDataArgs['limit'];
  offset: GetLeaderboardInstructionDataArgs['offset'];
};

export function getGetLeaderboardInstruction<
  TProgramAddress extends Address = typeof X_TOKEN_PROGRAM_ADDRESS,
>(
  input: GetLeaderboardInput,
  config?: { programAddress?: TProgramAddress },
): GetLeaderboardInstruction<TProgramAddress> {
  // Program address.
  const programAddress = config?.programAddress ?? X_TOKEN_PROGRAM_ADDRESS;

  // Original args.
  const args = { ...input };

  const instruction = {
    programAddress,
    data: getGetLeaderboardInstructionDataEncoder().encode(
      args as GetLeaderboardInstructionDataArgs,
    ),
  } as GetLeaderboardInstruction<TProgramAddress>;

  return instruction;
}

export type ParsedGetLeaderboardInstruction<
  TProgram extends string = typeof X_TOKEN_PROGRAM_ADDRESS,
> = {
  programAddress: Address<TProgram>;
  data: GetLeaderboardInstructionData;
};

export function parseGetLeaderboardInstruction<TProgram extends string>(
  instruction: Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array>,
): ParsedGetLeaderboardInstruction<TProgram> {
  return {
    programAddress: instruction.programAddress,
    data: getGetLeaderboardInstructionDataDecoder().decode(instruction.data),
  };
}
