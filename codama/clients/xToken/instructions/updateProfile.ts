/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getArrayDecoder,
  getArrayEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { X_TOKEN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const UPDATE_PROFILE_DISCRIMINATOR = 3;

export function getUpdateProfileDiscriminatorBytes() {
  return getU8Encoder().encode(UPDATE_PROFILE_DISCRIMINATOR);
}

export type UpdateProfileInstruction<
  TProgram extends string = typeof X_TOKEN_PROGRAM_ADDRESS,
  TAccountUserProfile extends string | AccountMeta<string> = string,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUserProfile extends string
        ? WritableAccount<TAccountUserProfile>
        : TAccountUserProfile,
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateProfileInstructionData = {
  discriminator: number;
  /** Username length (max 32 characters) */
  usernameLen: number;
  /** Bio length (max 200 characters) */
  bioLen: number;
  /** Padding for alignment */
  padding: number;
  /** Username (32 bytes) */
  username: Array<number>;
  /** Bio (200 bytes) */
  bio: Array<number>;
};

export type UpdateProfileInstructionDataArgs = {
  /** Username length (max 32 characters) */
  usernameLen: number;
  /** Bio length (max 200 characters) */
  bioLen: number;
  /** Padding for alignment */
  padding: number;
  /** Username (32 bytes) */
  username: Array<number>;
  /** Bio (200 bytes) */
  bio: Array<number>;
};

export function getUpdateProfileInstructionDataEncoder(): FixedSizeEncoder<UpdateProfileInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['usernameLen', getU8Encoder()],
      ['bioLen', getU8Encoder()],
      ['padding', getU16Encoder()],
      ['username', getArrayEncoder(getU8Encoder(), { size: 32 })],
      ['bio', getArrayEncoder(getU8Encoder(), { size: 200 })],
    ]),
    (value) => ({ ...value, discriminator: 3 }),
  );
}

export function getUpdateProfileInstructionDataDecoder(): FixedSizeDecoder<UpdateProfileInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['usernameLen', getU8Decoder()],
    ['bioLen', getU8Decoder()],
    ['padding', getU16Decoder()],
    ['username', getArrayDecoder(getU8Decoder(), { size: 32 })],
    ['bio', getArrayDecoder(getU8Decoder(), { size: 200 })],
  ]);
}

export function getUpdateProfileInstructionDataCodec(): FixedSizeCodec<
  UpdateProfileInstructionDataArgs,
  UpdateProfileInstructionData
> {
  return combineCodec(
    getUpdateProfileInstructionDataEncoder(),
    getUpdateProfileInstructionDataDecoder(),
  );
}

export type UpdateProfileInput<
  TAccountUserProfile extends string = string,
  TAccountUser extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** User profile account (PDA) */
  userProfile: Address<TAccountUserProfile>;
  /** User wallet (must be signer) */
  user: TransactionSigner<TAccountUser>;
  /** System Program */
  systemProgram?: Address<TAccountSystemProgram>;
  usernameLen: UpdateProfileInstructionDataArgs['usernameLen'];
  bioLen: UpdateProfileInstructionDataArgs['bioLen'];
  padding: UpdateProfileInstructionDataArgs['padding'];
  username: UpdateProfileInstructionDataArgs['username'];
  bio: UpdateProfileInstructionDataArgs['bio'];
};

export function getUpdateProfileInstruction<
  TAccountUserProfile extends string,
  TAccountUser extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof X_TOKEN_PROGRAM_ADDRESS,
>(
  input: UpdateProfileInput<
    TAccountUserProfile,
    TAccountUser,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): UpdateProfileInstruction<
  TProgramAddress,
  TAccountUserProfile,
  TAccountUser,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? X_TOKEN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    userProfile: { value: input.userProfile ?? null, isWritable: true },
    user: { value: input.user ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.userProfile),
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getUpdateProfileInstructionDataEncoder().encode(
      args as UpdateProfileInstructionDataArgs,
    ),
  } as UpdateProfileInstruction<
    TProgramAddress,
    TAccountUserProfile,
    TAccountUser,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedUpdateProfileInstruction<
  TProgram extends string = typeof X_TOKEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** User profile account (PDA) */
    userProfile: TAccountMetas[0];
    /** User wallet (must be signer) */
    user: TAccountMetas[1];
    /** System Program */
    systemProgram: TAccountMetas[2];
  };
  data: UpdateProfileInstructionData;
};

export function parseUpdateProfileInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedUpdateProfileInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      userProfile: getNextAccount(),
      user: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpdateProfileInstructionDataDecoder().decode(instruction.data),
  };
}
