/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { X_TOKEN_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SELL_TOKENS_DISCRIMINATOR = 2;

export function getSellTokensDiscriminatorBytes() {
  return getU8Encoder().encode(SELL_TOKENS_DISCRIMINATOR);
}

export type SellTokensInstruction<
  TProgram extends string = typeof X_TOKEN_PROGRAM_ADDRESS,
  TAccountSeller extends string | AccountMeta<string> = string,
  TAccountBondingCurve extends string | AccountMeta<string> = string,
  TAccountMint extends string | AccountMeta<string> = string,
  TAccountSellerTokenAccount extends string | AccountMeta<string> = string,
  TAccountTreasury extends string | AccountMeta<string> = string,
  TAccountFeeRecipient extends string | AccountMeta<string> = string,
  TAccountTokenProgram extends
    | string
    | AccountMeta<string> = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSeller extends string
        ? WritableSignerAccount<TAccountSeller> &
            AccountSignerMeta<TAccountSeller>
        : TAccountSeller,
      TAccountBondingCurve extends string
        ? WritableAccount<TAccountBondingCurve>
        : TAccountBondingCurve,
      TAccountMint extends string
        ? WritableAccount<TAccountMint>
        : TAccountMint,
      TAccountSellerTokenAccount extends string
        ? WritableAccount<TAccountSellerTokenAccount>
        : TAccountSellerTokenAccount,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountFeeRecipient extends string
        ? WritableAccount<TAccountFeeRecipient>
        : TAccountFeeRecipient,
      TAccountTokenProgram extends string
        ? ReadonlyAccount<TAccountTokenProgram>
        : TAccountTokenProgram,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SellTokensInstructionData = {
  discriminator: number;
  /** Amount of tokens to sell */
  tokenAmount: bigint;
  /** Minimum SOL amount willing to accept (slippage protection) */
  minSolAmount: bigint;
};

export type SellTokensInstructionDataArgs = {
  /** Amount of tokens to sell */
  tokenAmount: number | bigint;
  /** Minimum SOL amount willing to accept (slippage protection) */
  minSolAmount: number | bigint;
};

export function getSellTokensInstructionDataEncoder(): FixedSizeEncoder<SellTokensInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', getU8Encoder()],
      ['tokenAmount', getU64Encoder()],
      ['minSolAmount', getU64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: 2 }),
  );
}

export function getSellTokensInstructionDataDecoder(): FixedSizeDecoder<SellTokensInstructionData> {
  return getStructDecoder([
    ['discriminator', getU8Decoder()],
    ['tokenAmount', getU64Decoder()],
    ['minSolAmount', getU64Decoder()],
  ]);
}

export function getSellTokensInstructionDataCodec(): FixedSizeCodec<
  SellTokensInstructionDataArgs,
  SellTokensInstructionData
> {
  return combineCodec(
    getSellTokensInstructionDataEncoder(),
    getSellTokensInstructionDataDecoder(),
  );
}

export type SellTokensInput<
  TAccountSeller extends string = string,
  TAccountBondingCurve extends string = string,
  TAccountMint extends string = string,
  TAccountSellerTokenAccount extends string = string,
  TAccountTreasury extends string = string,
  TAccountFeeRecipient extends string = string,
  TAccountTokenProgram extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Seller account */
  seller: TransactionSigner<TAccountSeller>;
  /** Bonding curve state account */
  bondingCurve: Address<TAccountBondingCurve>;
  /** Token mint account */
  mint: Address<TAccountMint>;
  /** Seller's token account */
  sellerTokenAccount: Address<TAccountSellerTokenAccount>;
  /** Treasury account (holds SOL for bonding curve) */
  treasury: Address<TAccountTreasury>;
  /** Fee recipient account */
  feeRecipient: Address<TAccountFeeRecipient>;
  /** Token Program */
  tokenProgram?: Address<TAccountTokenProgram>;
  /** System Program */
  systemProgram?: Address<TAccountSystemProgram>;
  tokenAmount: SellTokensInstructionDataArgs['tokenAmount'];
  minSolAmount: SellTokensInstructionDataArgs['minSolAmount'];
};

export function getSellTokensInstruction<
  TAccountSeller extends string,
  TAccountBondingCurve extends string,
  TAccountMint extends string,
  TAccountSellerTokenAccount extends string,
  TAccountTreasury extends string,
  TAccountFeeRecipient extends string,
  TAccountTokenProgram extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof X_TOKEN_PROGRAM_ADDRESS,
>(
  input: SellTokensInput<
    TAccountSeller,
    TAccountBondingCurve,
    TAccountMint,
    TAccountSellerTokenAccount,
    TAccountTreasury,
    TAccountFeeRecipient,
    TAccountTokenProgram,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress },
): SellTokensInstruction<
  TProgramAddress,
  TAccountSeller,
  TAccountBondingCurve,
  TAccountMint,
  TAccountSellerTokenAccount,
  TAccountTreasury,
  TAccountFeeRecipient,
  TAccountTokenProgram,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? X_TOKEN_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    seller: { value: input.seller ?? null, isWritable: true },
    bondingCurve: { value: input.bondingCurve ?? null, isWritable: true },
    mint: { value: input.mint ?? null, isWritable: true },
    sellerTokenAccount: {
      value: input.sellerTokenAccount ?? null,
      isWritable: true,
    },
    treasury: { value: input.treasury ?? null, isWritable: true },
    feeRecipient: { value: input.feeRecipient ?? null, isWritable: true },
    tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.tokenProgram.value) {
    accounts.tokenProgram.value =
      'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA' as Address<'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.seller),
      getAccountMeta(accounts.bondingCurve),
      getAccountMeta(accounts.mint),
      getAccountMeta(accounts.sellerTokenAccount),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.feeRecipient),
      getAccountMeta(accounts.tokenProgram),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getSellTokensInstructionDataEncoder().encode(
      args as SellTokensInstructionDataArgs,
    ),
  } as SellTokensInstruction<
    TProgramAddress,
    TAccountSeller,
    TAccountBondingCurve,
    TAccountMint,
    TAccountSellerTokenAccount,
    TAccountTreasury,
    TAccountFeeRecipient,
    TAccountTokenProgram,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedSellTokensInstruction<
  TProgram extends string = typeof X_TOKEN_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Seller account */
    seller: TAccountMetas[0];
    /** Bonding curve state account */
    bondingCurve: TAccountMetas[1];
    /** Token mint account */
    mint: TAccountMetas[2];
    /** Seller's token account */
    sellerTokenAccount: TAccountMetas[3];
    /** Treasury account (holds SOL for bonding curve) */
    treasury: TAccountMetas[4];
    /** Fee recipient account */
    feeRecipient: TAccountMetas[5];
    /** Token Program */
    tokenProgram: TAccountMetas[6];
    /** System Program */
    systemProgram: TAccountMetas[7];
  };
  data: SellTokensInstructionData;
};

export function parseSellTokensInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>,
): ParsedSellTokensInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 8) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      seller: getNextAccount(),
      bondingCurve: getNextAccount(),
      mint: getNextAccount(),
      sellerTokenAccount: getNextAccount(),
      treasury: getNextAccount(),
      feeRecipient: getNextAccount(),
      tokenProgram: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getSellTokensInstructionDataDecoder().decode(instruction.data),
  };
}
