/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  getU8Encoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedBuyTokensInstruction,
  type ParsedInitializeInstruction,
  type ParsedSellTokensInstruction,
  type ParsedUpdateProfileInstruction,
} from '../instructions';

export const X_TOKEN_PROGRAM_ADDRESS =
  'C8XnGp4h3v7Hi1Tun4zD4bh6S5xpSUyp9HxEHtKNBcRB' as Address<'C8XnGp4h3v7Hi1Tun4zD4bh6S5xpSUyp9HxEHtKNBcRB'>;

export enum XTokenInstruction {
  Initialize,
  BuyTokens,
  SellTokens,
  UpdateProfile,
}

export function identifyXTokenInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array,
): XTokenInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (containsBytes(data, getU8Encoder().encode(0), 0)) {
    return XTokenInstruction.Initialize;
  }
  if (containsBytes(data, getU8Encoder().encode(1), 0)) {
    return XTokenInstruction.BuyTokens;
  }
  if (containsBytes(data, getU8Encoder().encode(2), 0)) {
    return XTokenInstruction.SellTokens;
  }
  if (containsBytes(data, getU8Encoder().encode(3), 0)) {
    return XTokenInstruction.UpdateProfile;
  }
  throw new Error(
    'The provided instruction could not be identified as a xToken instruction.',
  );
}

export type ParsedXTokenInstruction<
  TProgram extends string = 'C8XnGp4h3v7Hi1Tun4zD4bh6S5xpSUyp9HxEHtKNBcRB',
> =
  | ({
    instructionType: XTokenInstruction.Initialize;
  } & ParsedInitializeInstruction<TProgram>)
  | ({
    instructionType: XTokenInstruction.BuyTokens;
  } & ParsedBuyTokensInstruction<TProgram>)
  | ({
    instructionType: XTokenInstruction.SellTokens;
  } & ParsedSellTokensInstruction<TProgram>)
  | ({
    instructionType: XTokenInstruction.UpdateProfile;
  } & ParsedUpdateProfileInstruction<TProgram>);
